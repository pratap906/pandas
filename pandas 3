exercise-4
import pandas as pd
s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])
s.str.casefold()
s
0                 lower
1              CAPITALS
2    this is a sentence
3              SwApCaSe
dtype: object
import pandas as pd
s = pd.Series(['lower', 'CAPITALS', 'this is a sentence', 'SwApCaSe'])
s.str.casefold()
# Concatenation
import numpy as np
s = pd.Series(['a', 'b', np.nan, 'd'])
s.str.cat(sep=' ')
# Concatenation
s.str.cat(sep=' ', na_rep='?')
# Concatenation
s.str.cat(['A', 'B', 'C', 'D'], sep=',')
# Concatenation
s.str.cat(['A', 'B', 'C', 'D'], sep=',', na_rep='-')
# Concatenation
s.str.cat(['A', 'B', 'C', 'D'], na_rep='-')
# Concatenation
t = pd.Series(['d', 'a', 'e', 'c'], index=[3, 0, 4, 2])
s.str.cat(t, join='inner', na_rep='-')
#Series.str.count
import pandas as pd
import numpy as np
s = pd.Series(['A', 'B', 'Aaba', 'Baca', np.nan, 'CABA', 'cat'])
s.str.count('ab')
#str.strip
s = pd.Series(['1. Ant.  ', '2. Bee!\n', '3. Cat?\t', np.nan])
s
s.str.strip()
s.str.lstrip('123.')
s.str.rstrip('.!? \n\t')
s.str.strip('123.!? \n\t')
#str.pad
s = pd.Series(["caribou", "tiger"])
s
s.str.pad(width=10)
s.str.pad(width=10, side='both', fillchar='-')
#str.repeat
s = pd.Series(['a', 'b', 'c'])
s
#Single int repeats string in Series
s.str.repeat(repeats=2)
#Sequence of int repeats corresponding string in Series
s.str.repeat(repeats=[1, 2, 3])
#str.slice
s = pd.Series(["koala", "dog", "chameleon"])
s
s.str.slice(start=1)
s.str.slice(stop=2)
s.str.slice(start=0, stop=5, step=3)
s.str[0:5:3]
#str.zfill
s = pd.Series(['10', '250', '3000', '40000', '500000'])
s
s.str.zfill(8)
#Checks for Alphabetic and Numeric Characters
s1 = pd.Series(['one', 'one1', '1', ''])
s1.str.isalpha()
s1.str.isnumeric()
s1.str.isalnum()
0     True
1     True
2     True
3    False
dtype: bool
# Concatenation
import numpy as np
s = pd.Series(['a', 'b', np.nan, 'd'])
s.str.cat(sep=' ')
'a b d'
#Series.str.count
import pandas as pd
import numpy as np
s = pd.Series(['A', 'B', 'Aaba', 'Baca', np.nan, 'CABA', 'cat'])
s.str.count('ab')
0    0.0
1    0.0
2    1.0
3    0.0
4    NaN
5    0.0
6    0.0
dtype: float64
#str.strip
s = pd.Series(['1. Ant.  ', '2. Bee!\n', '3. Cat?\t', np.nan])
s
s.str.strip()
s.str.lstrip('123.')
s.str.rstrip('.!? \n\t')
s.str.strip('123.!? \n\t')
0    Ant
1    Bee
2    Cat
3    NaN
dtype: object
#str.pad
s = pd.Series(["caribou", "tiger"])
s
s.str.pad(width=10)
s.str.pad(width=10, side='both', fillchar='-')
0    -caribou--
1    --tiger---
dtype: object
#str.repeat
s = pd.Series(['a', 'b', 'c'])
s
#Single int repeats string in Series
s.str.repeat(repeats=2)
#Sequence of int repeats corresponding string in Series
s.str.repeat(repeats=[1, 2, 3])
0    a
1    b
2    c
dtype: object
s.str.repeat(repeats=2)
0    aa
1    bb
2    cc
dtype: object
s.str.repeat(repeats=[1, 2, 3])
0      a
1     bb
2    ccc
dtype: object
s = pd.Series(["koala", "dog", "chameleon"])
s
s.str.slice(start=1)
s.str.slice(stop=2)
s.str.slice(start=0, stop=5, step=3)
0    kl
1     d
2    cm
dtype: object
s.str[0:5:3]
0    kl
1     d
2    cm
dtype: object
s.str.slice(start=0, stop=5, step=3)
0    kl
1     d
2    cm
dtype: object
import pandas as pd
s = pd.Series(['python','PANDAS','NumPy'])
print("after converting to lowercase:\n",s.str.lower())
print("after converting to uppercase:\n",s.str.upper())
print("length of series:\n",s.str.len())
after converting to lowercase:
 0    python
1    pandas
2     numpy
dtype: object
after converting to uppercase:
 0    PYTHON
1    PANDAS
2     NUMPY
dtype: object
length of series:
 0    6
1    6
2    5
dtype: int64
import pandas as pd
s = pd.Series(['  python   ', '    pandas','numpy    '])
print(s)
print("after removing whitespaces:\n",s.str.strip())
print("after reomving right whitespaces:\n",s.str.rstrip())
print("after removing left whitespaces:\n",s.str.lstrip())
0      python   
1         pandas
2      numpy    
dtype: object
after removing whitespaces:
 0    python
1    pandas
2     numpy
dtype: object
after reomving right whitespaces:
 0        python
1        pandas
2         numpy
dtype: object
after removing left whitespaces:
 0    python   
1       pandas
2    numpy    
dtype: object
import pandas as pd
import numpy as np
df=pd.DataFrame( {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 
'Matthew', 'Laura', 'Kevin', 'Jonas'], 
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19], 
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1], 
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']} )
df['count']=df['name'].str.count('a')
print("the count of substring 'a' from the column:\n")
print(df[['name','count']])
the count of substring 'a' from the column:

        name  count
0  Anastasia      3
1       Dima      1
2  Katherine      1
3      James      1
4      Emily      0
5    Michael      1
6    Matthew      1
7      Laura      2
8      Kevin      0
9      Jonas      1
import pandas as pd
import numpy as np
df=pd.DataFrame( {'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 
'Matthew', 'Laura', 'Kevin', 'Jonas'], 
'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19], 
'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1], 
'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']} )
df['new']=df['name'].str.swapcase()
print("after performing swapcase on column:\n")
print(df[['name','new']])
after performing swapcase:

        name        new
0  Anastasia  aNASTASIA
1       Dima       dIMA
2  Katherine  kATHERINE
3      James      jAMES
4      Emily      eMILY
5    Michael    mICHAEL
6    Matthew    mATTHEW
7      Laura      lAURA
8      Kevin      kEVIN
9      Jonas      jONAS
 
